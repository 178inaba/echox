<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on Echo</title>
    <link>https://labstack.com/echo/guide/</link>
    <description>Recent content in Guides on Echo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://labstack.com/echo/guide/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Customization</title>
      <link>https://labstack.com/echo/guide/customization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/customization/</guid>
      <description>

&lt;h3 id=&#34;http-error-handler:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;HTTP error handler&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetHTTPErrorHandler(h HTTPErrorHandler)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Registers a custom &lt;code&gt;Echo#HTTPErrorHandler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Default handler rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If error is of type &lt;code&gt;Echo#HTTPError&lt;/code&gt; it sends HTTP response with status code &lt;code&gt;HTTPError.Code&lt;/code&gt;
and message &lt;code&gt;HTTPError.Message&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Else it sends &lt;code&gt;500 - Internal Server Error&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If debug mode is enabled, it uses &lt;code&gt;error.Error()&lt;/code&gt; as status message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;debug:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Debug&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetDebug(on bool)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enable/disable debug mode.&lt;/p&gt;

&lt;h3 id=&#34;log-prefix:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Log prefix&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetLogPrefix(prefix string)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SetLogPrefix sets the prefix for the logger. Default value is &lt;code&gt;echo&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;log-output:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Log output&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetLogOutput(w io.Writer)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SetLogOutput sets the output destination for the logger. Default value is &lt;code&gt;os.Stdout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To completely disable logs use &lt;code&gt;Echo#SetLogOutput(io.Discard)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;log-level:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Log level&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetLogLevel(l log.Level)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SetLogLevel sets the log level for the logger. Default value is &lt;code&gt;log.ERROR&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;engine:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Engine&lt;/h3&gt;

&lt;h4 id=&#34;standard-http-server:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Standard HTTP server&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(standard.New(&amp;quot;:1323&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-tls:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From TLS&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(standard.NewFromTLS(&amp;quot;:1323&amp;quot;, &amp;quot;&amp;lt;certfile&amp;gt;&amp;quot;, &amp;quot;&amp;lt;keyfile&amp;gt;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-config:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From config&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(standard.NewFromConfig(&amp;amp;Config{}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fasthttp-server:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;FastHTTP server&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(fasthttp.New(&amp;quot;:1323&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-tls-1:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From TLS&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(fasthttp.NewFromTLS(&amp;quot;:1323&amp;quot;, &amp;quot;&amp;lt;certfile&amp;gt;&amp;quot;, &amp;quot;&amp;lt;keyfile&amp;gt;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-config-1:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From config&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(fasthttp.NewFromConfig(&amp;amp;Config{}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configuration:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Configuration&lt;/h4&gt;

&lt;h5 id=&#34;address:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Address to bind.&lt;/p&gt;

&lt;h5 id=&#34;tlscertfile:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;TLSCertfile&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;TLS certificate file path&lt;/p&gt;

&lt;h5 id=&#34;tlskeyfile:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;TLSKeyfile&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;TLS key file path&lt;/p&gt;

&lt;h5 id=&#34;readtimeout:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;ReadTimeout&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;HTTP read timeout&lt;/p&gt;

&lt;h5 id=&#34;writetimeout:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;WriteTimeout&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;HTTP write timeout&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://labstack.com/echo/guide/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/error-handling/</guid>
      <description>&lt;p&gt;Echo advocates centralized HTTP error handling by returning &lt;code&gt;error&lt;/code&gt; from middleware
and handlers.&lt;/p&gt;

&lt;p&gt;It allows you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debug by writing stack trace to the HTTP response.&lt;/li&gt;
&lt;li&gt;Customize HTTP responses.&lt;/li&gt;
&lt;li&gt;Recover from panics inside middleware or handlers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, when basic auth middleware finds invalid credentials it returns
&lt;code&gt;401 - Unauthorized&lt;/code&gt; error, aborting the current HTTP request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;net/http&amp;quot;

	&amp;quot;github.com/labstack/echo&amp;quot;
)

func main() {
	e := echo.New()
	e.Use(func(c echo.Context) error {
		// Extract the credentials from HTTP request header and perform a security
		// check

		// For invalid credentials
		return echo.NewHTTPError(http.StatusUnauthorized)
	})
	e.Get(&amp;quot;/welcome&amp;quot;, welcome)
	e.Run(&amp;quot;:1323&amp;quot;)
}

func welcome(c echo.Context) error {
	return c.String(http.StatusOK, &amp;quot;Welcome!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how &lt;a href=&#34;https://labstack.com/echo/guide/customization#http-error-handler&#34;&gt;HTTPErrorHandler&lt;/a&gt; handles it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://labstack.com/echo/guide/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/installation/</guid>
      <description>

&lt;p&gt;Echo is developed and tested using Go &lt;code&gt;1.5.x&lt;/code&gt; and &lt;code&gt;1.6.x&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;install-the-latest-stable-version-of-echo-via-go-get:4c40a97dcf30b230e73eabba1323c21c&#34;&gt;Install the latest stable version of Echo via &lt;code&gt;go get&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/labstack/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;update:4c40a97dcf30b230e73eabba1323c21c&#34;&gt;Update&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get -u github.com/labstack/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;migrating-from-v1-guide-migrating:4c40a97dcf30b230e73eabba1323c21c&#34;&gt;&lt;a href=&#34;https://labstack.com/echo/guide/migrating&#34;&gt;Migrating from v1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Echo follows &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt; managed through GitHub releases.
Specific version of Echo can be installed using a &lt;a href=&#34;https://github.com/avelino/awesome-go#package-management&#34;&gt;package manager&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>https://labstack.com/echo/guide/middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/middleware/</guid>
      <description>

&lt;p&gt;Middleware is a function which is chained in the HTTP request-response cycle. Middleware
has access to the request and response objects which it utilizes to perform a specific
action, for example, logging every request.&lt;/p&gt;

&lt;h3 id=&#34;logger:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Logger&lt;/h3&gt;

&lt;p&gt;Logs each HTTP request with method, path, status, response time and bytes served.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(Logger())

// Output: `2015/06/07 18:16:16 GET / 200 13.238Âµs 14`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;basicauth:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;BasicAuth&lt;/h3&gt;

&lt;p&gt;BasicAuth middleware provides an HTTP basic authentication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For valid credentials it calls the next handler in the chain.&lt;/li&gt;
&lt;li&gt;For invalid Authorization header it sends &amp;ldquo;404 - Bad Request&amp;rdquo; response.&lt;/li&gt;
&lt;li&gt;For invalid credentials, it sends &amp;ldquo;401 - Unauthorized&amp;rdquo; response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := e.Group(&amp;quot;/admin&amp;quot;)
e.Use(middleware.BasicAuth(func(username, password string) bool {
	if username == &amp;quot;joe&amp;quot; &amp;amp;&amp;amp; password == &amp;quot;secret&amp;quot; {
		return true
	}
	return false
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gzip:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Gzip&lt;/h3&gt;

&lt;p&gt;Gzip middleware compresses HTTP response using gzip compression scheme.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(mw.Gzip())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;recover:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Recover&lt;/h3&gt;

&lt;p&gt;Recover middleware recovers from panics anywhere in the chain and handles the
control to the centralized
&lt;a href=&#34;https://labstack.com/echo/guide/customization/#http-error-handler:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;HTTPErrorHandler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(middleware.Recover())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;recipes-https-github-com-labstack-echox-tree-master-recipe-middleware:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/middleware&#34;&gt;Recipes&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Migrating</title>
      <link>https://labstack.com/echo/guide/migrating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/migrating/</guid>
      <description>

&lt;h3 id=&#34;migrating-from-v1:8f3a75fd928ac78c942739d5b03d80d9&#34;&gt;Migrating from v1&lt;/h3&gt;

&lt;h4 id=&#34;change-log:8f3a75fd928ac78c942739d5b03d80d9&#34;&gt;Change log&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Good news, 85% of the API remains the same.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Engine&lt;/code&gt; interface to abstract &lt;code&gt;HTTP&lt;/code&gt; server implementation, allowing
us to use HTTP servers beyond Go standard library. It currently supports standard HTTP server and &lt;a href=&#34;https://github.com/valyala/fasthttp&#34;&gt;FastHTTP&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Context, Request and Response are converted to interfaces. &lt;a href=&#34;https://github.com/labstack/echo/issues/146&#34;&gt;More&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handler signature is changed to &lt;code&gt;func (c echo.Context) error&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Dropped auto wrapping of handler and middleware to enforce compile time check.&lt;/li&gt;
&lt;li&gt;Handler only accepts &lt;code&gt;Echo#Handler&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;Middleware only accepts &lt;code&gt;Echo#Middleware&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Echo#HandlerFunc&lt;/code&gt; adapter to use ordinary functions as handlers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Echo#MiddlewareFunc&lt;/code&gt; adapter to use ordinary functions as middleware.&lt;/li&gt;
&lt;li&gt;Middleware is run before hitting the router, which doesn&amp;rsquo;t require &lt;code&gt;Echo#Hook&lt;/code&gt; API as
it can be achieved via middleware.&lt;/li&gt;
&lt;li&gt;Ability to define middleware at route level.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Echo#HTTPError&lt;/code&gt; exposed it&amp;rsquo;s fields &lt;code&gt;Code&lt;/code&gt; and &lt;code&gt;Message&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;how:8f3a75fd928ac78c942739d5b03d80d9&#34;&gt;How?&lt;/h4&gt;

&lt;p&gt;Quite easy
- Browse through &lt;a href=&#34;https://labstack.com/echo/recipes/hello-world&#34;&gt;recipes&lt;/a&gt; freshly converted to v2.
- Read documentation and dig into test cases.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Request</title>
      <link>https://labstack.com/echo/guide/request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/request/</guid>
      <description>

&lt;h3 id=&#34;handler-path:a725da1aff8eeb0d3acc3a6c40bf2c06&#34;&gt;Handler path&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context#Path()&lt;/code&gt; returns the registered path for the handler, it can be used in the
middleware for logging purpose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(func(c echo.Context) error {
    println(c.Path()) // Prints `/users/:name`
    return nil
})
e.Get(&amp;quot;/users/:name&amp;quot;, func(c echo.Context) error) {
    return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;golang-org-x-net-context:a725da1aff8eeb0d3acc3a6c40bf2c06&#34;&gt;golang.org/x/net/context&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;echo.Context&lt;/code&gt; embeds &lt;code&gt;context.Context&lt;/code&gt; interface, so all it&amp;rsquo;s properties
are available right from &lt;code&gt;echo.Context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Get(&amp;quot;/users/:name&amp;quot;, func(c echo.Context) error) {
    c.Context = context.WithValue(nil, &amp;quot;key&amp;quot;, &amp;quot;val&amp;quot;)
    // Pass it down...
    // Use it...
    println(c.Value(&amp;quot;key&amp;quot;))
    return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;path-parameter:a725da1aff8eeb0d3acc3a6c40bf2c06&#34;&gt;Path parameter&lt;/h3&gt;

&lt;p&gt;Path parameter can be retrieved either by name &lt;code&gt;Context#Param(name string) string&lt;/code&gt;
or by index &lt;code&gt;Context#P(i int) string&lt;/code&gt;. Getting parameter by index gives a slightly
better performance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Get(&amp;quot;/users/:name&amp;quot;, func(c echo.Context) error {
	// By name
	name := c.Param(&amp;quot;name&amp;quot;)

	// By index
	name := c.P(0)

	return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl http://localhost:1323/users/joe
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;query-parameter:a725da1aff8eeb0d3acc3a6c40bf2c06&#34;&gt;Query parameter&lt;/h3&gt;

&lt;p&gt;Query parameter can be retrieved by name using &lt;code&gt;Context#Query(name string)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Get(&amp;quot;/users&amp;quot;, func(c echo.Context) error {
	name := c.Query(&amp;quot;name&amp;quot;)
	return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -G -d &amp;quot;name=joe&amp;quot; http://localhost:1323/users
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;form-parameter:a725da1aff8eeb0d3acc3a6c40bf2c06&#34;&gt;Form parameter&lt;/h3&gt;

&lt;p&gt;Form parameter can be retrieved by name using &lt;code&gt;Context#Form(name string)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Post(&amp;quot;/users&amp;quot;, func(c echo.Context) error {
	name := c.Form(&amp;quot;name&amp;quot;)
	return c.String(http.StatusOK, name)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -d &amp;quot;name=joe&amp;quot; http://localhost:1323/users
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Response</title>
      <link>https://labstack.com/echo/guide/response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/response/</guid>
      <description>

&lt;h3 id=&#34;template:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Template&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context#Render(code int, name string, data interface{}) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Renders a template with data and sends a text/html response with status code. Templates
can be registered using &lt;code&gt;Echo.SetRenderer()&lt;/code&gt;, allowing us to use any template engine.&lt;/p&gt;

&lt;p&gt;Below is an example using Go &lt;code&gt;html/template&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;echo.Render&lt;/code&gt; interface&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Template struct {
    templates *template.Template
}

func (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return t.templates.ExecuteTemplate(w, name, data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Pre-compile templates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;public/views/hello.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{define &amp;quot;hello&amp;quot;}}Hello, {{.}}!{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;t := &amp;amp;Template{
    templates: template.Must(template.ParseGlob(&amp;quot;public/views/*.html&amp;quot;)),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Register templates&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.SetRenderer(t)
e.Get(&amp;quot;/hello&amp;quot;, Hello)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Render template&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Hello(c echo.Context) error {
	return c.Render(http.StatusOK, &amp;quot;hello&amp;quot;, &amp;quot;World&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;json:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;JSON&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context.JSON(code int, v interface{}) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sends a JSON HTTP response with status code.&lt;/p&gt;

&lt;h3 id=&#34;jsonp:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;JSONP&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context.JSONP(code int, callback string, i interface{}) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sends a JSONP HTTP response with status code. It uses &lt;code&gt;callback&lt;/code&gt; to construct the
JSONP payload.&lt;/p&gt;

&lt;h3 id=&#34;xml:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;XML&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context.XML(code int, v interface{}) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sends an XML HTTP response with status code.&lt;/p&gt;

&lt;h3 id=&#34;html:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;HTML&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;c.HTML(code int, html string) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sends an HTML response with status code.&lt;/p&gt;

&lt;h3 id=&#34;string:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;String&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context#String(code int, s string) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sends a string response with status code.&lt;/p&gt;

&lt;h3 id=&#34;file:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;File&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;func (c *context) File(file string) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sends a response with the content of the file.&lt;/p&gt;

&lt;h3 id=&#34;attachment:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Attachment&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Context#Attachment(file string) error&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sends a response as file attachment, prompting client to save the file.&lt;/p&gt;

&lt;h3 id=&#34;static-files:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Static Files&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#Use(middleware.Static(root string))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Serves static files from the provided &lt;code&gt;root&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Echo#Static(prefix, root string)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Serves files from provided &lt;code&gt;root&lt;/code&gt; directory for &lt;code&gt;/&amp;lt;prefix&amp;gt;*&lt;/code&gt; HTTP path.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Echo#File(path, file string)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Serves provided &lt;code&gt;file&lt;/code&gt; for &lt;code&gt;/&amp;lt;path&amp;gt;&lt;/code&gt; HTTP path.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Examples&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serving static files with no prefix &lt;code&gt;e.Use(middleware.Static(&amp;quot;public&amp;quot;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Serving static files with a prefix &lt;code&gt;e.Static(&amp;quot;/static&amp;quot;, &amp;quot;assets&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Serving an index page &lt;code&gt;e.File(&amp;quot;/&amp;quot;, &amp;quot;public/index.html&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Serving a favicon &lt;code&gt;e.File(&amp;quot;/favicon.ico&amp;quot;, &amp;quot;images/facicon.ico&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://labstack.com/echo/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/routing/</guid>
      <description>

&lt;p&gt;Echo&amp;rsquo;s router is &lt;a href=&#34;https://labstack.com/echo/./#performance:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;fast, optimized&lt;/a&gt; and
flexible. It&amp;rsquo;s based on &lt;a href=&#34;http://en.wikipedia.org/wiki/Radix_tree&#34;&gt;radix tree&lt;/a&gt; data
structure which makes route lookup really fast. Router leverages &lt;a href=&#34;https://golang.org/pkg/sync/#Pool&#34;&gt;sync pool&lt;/a&gt;
to reuse memory and achieve zero dynamic memory allocation with no GC overhead.&lt;/p&gt;

&lt;p&gt;Routes can be registered by specifying HTTP method, path and a handler. For example,
code below registers a route for method &lt;code&gt;GET&lt;/code&gt;, path &lt;code&gt;/hello&lt;/code&gt; and a handler which sends
&lt;code&gt;Hello!&lt;/code&gt; HTTP response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Get(&amp;quot;/hello&amp;quot;, func(c echo.Context) error {
	return c.String(http.StatusOK, &amp;quot;Hello!&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;Echo.Any(path string, h Handler)&lt;/code&gt; to register a handler for all HTTP methods.
If you want to register it for some methods use &lt;code&gt;Echo.Match(methods []string, path string, h Handler)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Echo defines handler function as &lt;code&gt;func(echo.Context) error&lt;/code&gt; where &lt;code&gt;echo.Context&lt;/code&gt; primarily
holds HTTP request and response interfaces.&lt;/p&gt;

&lt;h3 id=&#34;match-any:ce107015c43d323e34bbf68cbc83e623&#34;&gt;Match-any&lt;/h3&gt;

&lt;p&gt;Matches zero or more characters in the path. For example, pattern &lt;code&gt;/users/*&lt;/code&gt; will
match:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/users/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/users/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/users/1/files/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/users/anything...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;path-matching-order:ce107015c43d323e34bbf68cbc83e623&#34;&gt;Path matching order&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Static&lt;/li&gt;
&lt;li&gt;Param&lt;/li&gt;
&lt;li&gt;Match any&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example:ce107015c43d323e34bbf68cbc83e623&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Get(&amp;quot;/users/:id&amp;quot;, func(c echo.Context) error {
	return c.String(http.StatusOK, &amp;quot;/users/:id&amp;quot;)
})

e.Get(&amp;quot;/users/new&amp;quot;, func(c echo.Context) error {
	return c.String(http.StatusOK, &amp;quot;/users/new&amp;quot;)
})

e.Get(&amp;quot;/users/1/files/*&amp;quot;, func(c echo.Context) error {
	return c.String(http.StatusOK, &amp;quot;/users/1/files/*&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above routes would resolve in the following order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/users/new&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/users/:id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/users/1/files/*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Routes can be written in any order.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;group:ce107015c43d323e34bbf68cbc83e623&#34;&gt;Group&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#Group(prefix string, m ...Middleware) *Group&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Routes with common prefix can be grouped to define a new sub-router with optional
middleware. In addition to specified middleware group also inherits parent middleware.
To add middleware later in the group you can use &lt;code&gt;Group.Use(m ...Middleware)&lt;/code&gt;.
Groups can also be nested.&lt;/p&gt;

&lt;p&gt;In the code below, we create an admin group which requires basic HTTP authentication
for routes &lt;code&gt;/admin/*&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Group(&amp;quot;/admin&amp;quot;)
e.Use(middleware.BasicAuth(func(username, password string) bool {
	if username == &amp;quot;joe&amp;quot; &amp;amp;&amp;amp; password == &amp;quot;secret&amp;quot; {
		return true
	}
	return false
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uri-building:ce107015c43d323e34bbf68cbc83e623&#34;&gt;URI building&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo.URI&lt;/code&gt; can be used to generate URI for any handler with specified path parameters.
It&amp;rsquo;s helpful to centralize all your URI patterns which ease in refactoring your
application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.URI(h, 1)&lt;/code&gt; will generate &lt;code&gt;/users/1&lt;/code&gt; for the route registered below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Handler
h := func(c echo.Context) error {
	return c.String(http.StatusOK, &amp;quot;OK&amp;quot;)
}

// Route
e.Get(&amp;quot;/users/:id&amp;quot;, h)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>