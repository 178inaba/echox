<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Echo</title>
    <link>https://labstack.com/echo/</link>
    <description>Recent content on Echo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://labstack.com/echo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CORS</title>
      <link>https://labstack.com/echo/recipes/cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/cors/</guid>
      <description>

&lt;h3 id=&#34;server:dcf9991619d3c40559795bfe4d699a98&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/cors/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:dcf9991619d3c40559795bfe4d699a98&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-2:dcf9991619d3c40559795bfe4d699a98&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/cors
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>CRUD</title>
      <link>https://labstack.com/echo/recipes/crud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/crud/</guid>
      <description>

&lt;h3 id=&#34;server:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/crud/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-2:a4249ff8b4745ad425f56aaea8765f59&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/crud
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Customization</title>
      <link>https://labstack.com/echo/guide/customization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/customization/</guid>
      <description>

&lt;h3 id=&#34;http-error-handler:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;HTTP error handler&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetHTTPErrorHandler(h HTTPErrorHandler)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Registers a custom &lt;code&gt;Echo#HTTPErrorHandler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Default handler rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If error is of type &lt;code&gt;Echo#HTTPError&lt;/code&gt; it sends HTTP response with status code &lt;code&gt;HTTPError.Code&lt;/code&gt;
and message &lt;code&gt;HTTPError.Message&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Else it sends &lt;code&gt;500 - Internal Server Error&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If debug mode is enabled, it uses &lt;code&gt;error.Error()&lt;/code&gt; as status message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;debug:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Debug&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetDebug(on bool)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enable/disable debug mode.&lt;/p&gt;

&lt;h3 id=&#34;log-prefix:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Log prefix&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetLogPrefix(prefix string)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SetLogPrefix sets the prefix for the logger. Default value is &lt;code&gt;echo&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;log-output:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Log output&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetLogOutput(w io.Writer)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SetLogOutput sets the output destination for the logger. Default value is &lt;code&gt;os.Stdout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To completely disable logs use &lt;code&gt;Echo#SetLogOutput(io.Discard)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;log-level:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Log level&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Echo#SetLogLevel(l log.Level)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SetLogLevel sets the log level for the logger. Default value is &lt;code&gt;log.ERROR&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;engine:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Engine&lt;/h3&gt;

&lt;h4 id=&#34;standard-http-server:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Standard HTTP server&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(standard.New(&amp;quot;:1323&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-tls:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From TLS&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(standard.NewFromTLS(&amp;quot;:1323&amp;quot;, &amp;quot;&amp;lt;certfile&amp;gt;&amp;quot;, &amp;quot;&amp;lt;keyfile&amp;gt;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-config:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From config&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(standard.NewFromConfig(&amp;amp;Config{}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fasthttp-server:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;FastHTTP server&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(fasthttp.New(&amp;quot;:1323&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-tls-1:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From TLS&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(fasthttp.NewFromTLS(&amp;quot;:1323&amp;quot;, &amp;quot;&amp;lt;certfile&amp;gt;&amp;quot;, &amp;quot;&amp;lt;keyfile&amp;gt;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;from-config-1:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;From config&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Run(fasthttp.NewFromConfig(&amp;amp;Config{}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configuration:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;Configuration&lt;/h4&gt;

&lt;h5 id=&#34;address:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Address to bind.&lt;/p&gt;

&lt;h5 id=&#34;tlscertfile:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;TLSCertfile&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;TLS certificate file path&lt;/p&gt;

&lt;h5 id=&#34;tlskeyfile:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;TLSKeyfile&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;TLS key file path&lt;/p&gt;

&lt;h5 id=&#34;readtimeout:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;ReadTimeout&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;HTTP read timeout&lt;/p&gt;

&lt;h5 id=&#34;writetimeout:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;&lt;code&gt;WriteTimeout&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;HTTP write timeout&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embed Resources</title>
      <link>https://labstack.com/echo/recipes/embed-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/embed-resources/</guid>
      <description>

&lt;h3 id=&#34;with-go-rice:61e5a53918113e02ed487297671d7f3c&#34;&gt;With go.rice&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/embed-resources/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:61e5a53918113e02ed487297671d7f3c&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/caarlos0&#34;&gt;caarlos0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-2:61e5a53918113e02ed487297671d7f3c&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/embed-resources
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://labstack.com/echo/guide/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/error-handling/</guid>
      <description>&lt;p&gt;Echo advocates centralized HTTP error handling by returning &lt;code&gt;error&lt;/code&gt; from middleware
and handlers.&lt;/p&gt;

&lt;p&gt;It allows you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debug by writing stack trace to the HTTP response.&lt;/li&gt;
&lt;li&gt;Customize HTTP responses.&lt;/li&gt;
&lt;li&gt;Recover from panics inside middleware or handlers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, when basic auth middleware finds invalid credentials it returns
&lt;code&gt;401 - Unauthorized&lt;/code&gt; error, aborting the current HTTP request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;net/http&amp;quot;

	&amp;quot;github.com/labstack/echo&amp;quot;
)

func main() {
	e := echo.New()
	e.Use(func(c echo.Context) error {
		// Extract the credentials from HTTP request header and perform a security
		// check

		// For invalid credentials
		return echo.NewHTTPError(http.StatusUnauthorized)
	})
	e.Get(&amp;quot;/welcome&amp;quot;, welcome)
	e.Run(&amp;quot;:1323&amp;quot;)
}

func welcome(c echo.Context) error {
	return c.String(http.StatusOK, &amp;quot;Welcome!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how &lt;a href=&#34;https://labstack.com/echo/guide/customization#http-error-handler&#34;&gt;HTTPErrorHandler&lt;/a&gt; handles it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File Upload</title>
      <link>https://labstack.com/echo/recipes/file-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/file-upload/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Multipart/form-data file upload&lt;/li&gt;
&lt;li&gt;Multiple form fields and files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code&gt;req.ParseMultipartForm(16 &amp;lt;&amp;lt; 20)&lt;/code&gt; for manually parsing multipart form. It gives
us an option to specify the maximum memory used while parsing the request body.&lt;/p&gt;

&lt;p&gt;If you just want to upload a single file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, fh, err := req.FormFile(&amp;quot;file&amp;quot;)
if err != nil {
    return err
}
defer file.Close()

// Destination
dst, err := os.Create(fh.Filename)
if err != nil {
    return err
}
defer dst.Close()

// Copy
if _, err = io.Copy(dst, file); err != nil {
    return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;server:b1e06c3f7f16e71bbb6475cc0380869f&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;client:b1e06c3f7f16e71bbb6475cc0380869f&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/file-upload/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:b1e06c3f7f16e71bbb6475cc0380869f&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-3:b1e06c3f7f16e71bbb6475cc0380869f&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/file-upload
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Google App Engine</title>
      <link>https://labstack.com/echo/recipes/google-app-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/google-app-engine/</guid>
      <description>

&lt;p&gt;Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic)
through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo
works great with all of these but requires a few changes to the usual examples to run on the
AppEngine Classic and Managed VM options. With a small amount of effort though it&amp;rsquo;s possible
to produce a codebase that will run on these and also non-managed platforms automatically.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the changes needed to support each option.&lt;/p&gt;

&lt;h3 id=&#34;standalone:c1d8683ee4950db0bb4125a71922c046&#34;&gt;Standalone&lt;/h3&gt;

&lt;p&gt;Wait? What? I thought this was about AppEngine! Bear with me - the easiest way to show the changes
required is to start with a setup for standalone and work from there plus there&amp;rsquo;s no reason we
wouldn&amp;rsquo;t want to retain the ability to run our app anywhere, right?&lt;/p&gt;

&lt;p&gt;We take advantage of the go &lt;a href=&#34;http://golang.org/pkg/go/build/&#34;&gt;build constraints or tags&lt;/a&gt; to change
how we create and run the Echo server for each platform while keeping the rest of the application
(e.g. handler wireup) the same across all of them.&lt;/p&gt;

&lt;p&gt;First, we have the normal setup based on the examples but we split it into two files - &lt;code&gt;app.go&lt;/code&gt; will
be common to all variations and holds the Echo instance variable. We initialise it from a function
and because it is a &lt;code&gt;var&lt;/code&gt; this will happen &lt;em&gt;before&lt;/em&gt; any &lt;code&gt;init()&lt;/code&gt; functions run - a feature that we&amp;rsquo;ll
use to connect our handlers later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;A separate source file contains the function to create the Echo instance and add the static
file handlers and middleware. Note the build tag on the first line which says to use this when &lt;em&gt;not&lt;/em&gt;
bulding with appengine or appenginevm tags (which thoese platforms automatically add for us). We also
have the &lt;code&gt;main()&lt;/code&gt; function to start serving our app as normal. This should all be very familiar.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-standalone.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-standalone.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;The handler-wireup that would normally also be a part of this Echo setup moves to separate files which
take advantage of the ability to have multiple &lt;code&gt;init()&lt;/code&gt; functions which run &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;e&lt;/code&gt; Echo var is
initialised but &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;main()&lt;/code&gt; function is executed. These allow additional handlers to attach
themselves to the instance - I&amp;rsquo;ve found the &lt;code&gt;Group&lt;/code&gt; feature naturally fits into this pattern with a file
per REST endpoint, often with a higher-level &lt;code&gt;api&lt;/code&gt; group created that they attach to instead of the root
Echo instance directly (so things like CORS middleware can be added at this higher common-level).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;users.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/users.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;If we run our app it should execute as it did before when everything was in one file although we have
at least gained the ability to organize our handlers a little more cleanly.&lt;/p&gt;

&lt;h3 id=&#34;appengine-classic-and-managed-vms:c1d8683ee4950db0bb4125a71922c046&#34;&gt;AppEngine Classic and Managed VMs&lt;/h3&gt;

&lt;p&gt;So far we&amp;rsquo;ve seen how to split apart the Echo creation and setup but still have the same app that
still only runs standalone. Now we&amp;rsquo;ll see hwo those changes allow us to add support for AppEngine
hosting.&lt;/p&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;https://cloud.google.com/appengine/docs/go/&#34;&gt;AppEngine site&lt;/a&gt; for full configuration
and deployment information.&lt;/p&gt;

&lt;h4 id=&#34;app-yaml-configuration-file:c1d8683ee4950db0bb4125a71922c046&#34;&gt;app.yaml configuration file&lt;/h4&gt;

&lt;p&gt;Both of these are Platform as as Service options running on either sandboxed micro-containers
or managed Compute Engine instances. Both require an &lt;code&gt;app.yaml&lt;/code&gt; file to describe the app to
the service. While the app &lt;em&gt;could&lt;/em&gt; still serve all it&amp;rsquo;s static files itself, one of the benefits
of the platform is having Google&amp;rsquo;s infrastructure handle that for us so it can be offloaded and
the app only has to deal with dynamic requests. The platform also handles logging and http gzip
compression so these can be removed from the codebase as well.&lt;/p&gt;

&lt;p&gt;The yaml file also contains other options to control instance size and auto-scaling so for true
deployment freedom you would likely have separate &lt;code&gt;app-classic.yaml&lt;/code&gt; and &lt;code&gt;app-vm.yaml&lt;/code&gt; files and
this can help when making the transition from AppEngine Classic to Managed VMs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-engine.yaml&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-engine.yaml&#34;&gt;
&lt;/pre&gt;


&lt;h4 id=&#34;router-configuration:c1d8683ee4950db0bb4125a71922c046&#34;&gt;Router configuration&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ll now use the &lt;a href=&#34;http://golang.org/pkg/go/build/&#34;&gt;build constraints&lt;/a&gt; again like we did when creating
our &lt;code&gt;app-standalone.go&lt;/code&gt; instance but this time with the opposite tags to use this file &lt;em&gt;if&lt;/em&gt; the build has
the appengine or appenginevm tags (added automatically when deploying to these platforms).&lt;/p&gt;

&lt;p&gt;This allows us to replace the &lt;code&gt;createMux()&lt;/code&gt; function to create our Echo server &lt;em&gt;without&lt;/em&gt; any of the
static file handling and logging + gzip middleware which is no longer required. Also worth nothing is
that GAE classic provides a wrapper to handle serving the app so instead of a &lt;code&gt;main()&lt;/code&gt; function where
we run the server, we instead wire up the router to the default &lt;code&gt;http.Handler&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-engine.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-engine.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;Managed VMs are slightly different. They are expected to respond to requests on port 8080 as well
as special health-check requests used by the service to detect if an instance is still running in
order to provide automated failover and instance replacement. The &lt;code&gt;google.golang.org/appengine&lt;/code&gt;
package provides this for us so we have a slightly different version for Managed VMs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app-managed.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/google-app-engine/app-managed.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;So now we have three different configurations. We can build and run our app as normal so it can
be executed locally, on a full Compute Engine instance or any other traditional hosting provider
(including EC2, Docker etc&amp;hellip;). This build will ignore the code in appengine and appenginevm tagged
files and the &lt;code&gt;app.yaml&lt;/code&gt; file is meaningless to anything other than the AppEngine platform.&lt;/p&gt;

&lt;p&gt;We can also run locally using the &lt;a href=&#34;https://cloud.google.com/appengine/downloads&#34;&gt;Google AppEngine SDK for Go&lt;/a&gt;
either emulating &lt;a href=&#34;https://cloud.google.com/appengine/docs/go/tools/devserver&#34;&gt;AppEngine Classic&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &lt;a href=&#34;https://cloud.google.com/appengine/docs/managed-vms/sdk#run-local&#34;&gt;Managed VMs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud config set project [your project id]
gcloud preview app run .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course we can deploy our app to both of these platforms for easy and inexpensive auto-scaling joy.&lt;/p&gt;

&lt;p&gt;Depending on what your app actually does it&amp;rsquo;s possible you may need to make other changes to allow
switching between AppEngine provided service such as Datastore and alternative storage implementations
such as MongoDB. A combination of go interfaces and build constraints can make this fairly straightforward
but is outside the scope of this recipe.&lt;/p&gt;

&lt;h3 id=&#34;maintainers:c1d8683ee4950db0bb4125a71922c046&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CaptainCodeman&#34;&gt;CaptainCodeman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-7:c1d8683ee4950db0bb4125a71922c046&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/google-app-engine
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Graceful Shutdown</title>
      <link>https://labstack.com/echo/recipes/graceful-shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/graceful-shutdown/</guid>
      <description>

&lt;h3 id=&#34;with-grace-https-github-com-facebookgo-grace:443d3514c59ff2a06ae0a5c62bda56ca&#34;&gt;With &lt;a href=&#34;https://github.com/facebookgo/grace&#34;&gt;grace&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/graceful-shutdown/grace/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;with-graceful-https-github-com-tylerb-graceful:443d3514c59ff2a06ae0a5c62bda56ca&#34;&gt;With &lt;a href=&#34;https://github.com/tylerb/graceful&#34;&gt;graceful&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/graceful-shutdown/graceful/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:443d3514c59ff2a06ae0a5c62bda56ca&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mertenvg&#34;&gt;mertenvg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code:443d3514c59ff2a06ae0a5c62bda56ca&#34;&gt;Source Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/graceful-shutdown/graceful
&#34;&gt;graceful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/graceful-shutdown/grace
&#34;&gt;grace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://labstack.com/echo/recipes/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/hello-world/</guid>
      <description>

&lt;h3 id=&#34;server:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/hello-world/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-2:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/hello-world
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Index</title>
      <link>https://labstack.com/echo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/</guid>
      <description>

&lt;h1 id=&#34;echo-images-echo-svg-echo:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;img src=&#34;https://labstack.com/echo/images/echo.svg&#34; alt=&#34;Echo&#34; /&gt; Echo&lt;/h1&gt;

&lt;p&gt;A fast and unfancy micro web framework for Go.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fast HTTP router which smartly prioritize routes.&lt;/li&gt;
&lt;li&gt;Run with standard HTTP server or FastHTTP server.&lt;/li&gt;
&lt;li&gt;Extensible middleware framework.&lt;/li&gt;
&lt;li&gt;Router groups with nesting.&lt;/li&gt;
&lt;li&gt;Handy functions to send variety of HTTP responses.&lt;/li&gt;
&lt;li&gt;Centralized HTTP error handling.&lt;/li&gt;
&lt;li&gt;Template rendering with any template engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;performance:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Performance&lt;/h2&gt;

&lt;iframe width=&#34;600&#34; height=&#34;371&#34; seamless frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://docs.google.com/spreadsheets/d/1phsG_NPmEOaTVTw6lasK3CeEwBlbkhzAWPiyrBznm1g/pubchart?oid=178095723&amp;amp;format=interactive&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;h3 id=&#34;installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/labstack/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hello-world:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Hello, World!&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;net/http&amp;quot;

	&amp;quot;github.com/labstack/echo&amp;quot;
	&amp;quot;github.com/labstack/echo/engine/standard&amp;quot;
	&amp;quot;github.com/labstack/echo/middleware&amp;quot;
)

// Handler
func hello() echo.HandlerFunc {
	return func(c echo.Context) error {
		return c.String(http.StatusOK, &amp;quot;Hello, World!\n&amp;quot;)
	}
}

func main() {
	// Echo instance
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// Routes
	e.Get(&amp;quot;/&amp;quot;, hello())

	// Start server
	e.Run(standard.New(&amp;quot;:1323&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to &lt;a href=&#34;http://localhost:1323&#34;&gt;http://localhost:1323&lt;/a&gt; and you should see
Hello, World! on the page.&lt;/p&gt;

&lt;h3 id=&#34;next:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Next?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Browse &lt;a href=&#34;https://labstack.com/echo/recipes/hello-world&#34;&gt;recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Head over to &lt;a href=&#34;https://labstack.com/echo/guide/installation&#34;&gt;guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;contribute:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Contribute&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Use issues for everything&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Report issues&lt;/li&gt;
&lt;li&gt;Discuss before sending pull request&lt;/li&gt;
&lt;li&gt;Suggest new features&lt;/li&gt;
&lt;li&gt;Improve/fix documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;credits:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Credits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;Vishal Rana&lt;/a&gt; - Author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nr17&#34;&gt;Nitin Rana&lt;/a&gt; - Consultant&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echo/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;license:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/labstack/echo/blob/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://labstack.com/echo/guide/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/installation/</guid>
      <description>

&lt;p&gt;Echo is developed and tested using Go &lt;code&gt;1.5.x&lt;/code&gt; and &lt;code&gt;1.6.x&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;install-the-latest-stable-version-of-echo-via-go-get:4c40a97dcf30b230e73eabba1323c21c&#34;&gt;Install the latest stable version of Echo via &lt;code&gt;go get&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/labstack/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;update:4c40a97dcf30b230e73eabba1323c21c&#34;&gt;Update&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get -u github.com/labstack/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;migrating-from-v1-guide-migrating:4c40a97dcf30b230e73eabba1323c21c&#34;&gt;&lt;a href=&#34;https://labstack.com/echo/guide/migrating&#34;&gt;Migrating from v1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Echo follows &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt; managed through GitHub releases.
Specific version of Echo can be installed using a &lt;a href=&#34;https://github.com/avelino/awesome-go#package-management&#34;&gt;package manager&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSONP</title>
      <link>https://labstack.com/echo/recipes/jsonp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/jsonp/</guid>
      <description>

&lt;p&gt;JSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.&lt;/p&gt;

&lt;h3 id=&#34;server:51dfbda7fbfd65fd59e6c425747ca897&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/jsonp/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;client:51dfbda7fbfd65fd59e6c425747ca897&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/jsonp/public/index.html&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:51dfbda7fbfd65fd59e6c425747ca897&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/willf&#34;&gt;willf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-3:51dfbda7fbfd65fd59e6c425747ca897&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/jsonp
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>JWT Authentication</title>
      <link>https://labstack.com/echo/recipes/jwt-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/jwt-authentication/</guid>
      <description>

&lt;p&gt;Most applications dealing with client authentication will require a more secure
mechanism than that provided by &lt;a href=&#34;https://github.com/labstack/echo/blob/master/middleware/auth.go&#34;&gt;basic authentication&lt;/a&gt;. &lt;a href=&#34;http://jwt.io/&#34;&gt;JSON Web Tokens&lt;/a&gt;
are one such mechanism - JWTs are a compact means of transferring cryptographically
signed claims between the client and server.&lt;/p&gt;

&lt;p&gt;This recipe demonstrates the use of a simple JWT authentication Echo middleware
using Dave Grijalva&amp;rsquo;s &lt;a href=&#34;https://github.com/dgrijalva/jwt-go&#34;&gt;jwt-go&lt;/a&gt;. This middleware
expects the token to be present in an Authorization HTTP header using the method
&amp;ldquo;Bearer&amp;rdquo;, although JWTs are also frequently sent using cookies, the request URL,
or even the request body. We will use the HS236 signing method, note that several
other algorithms are available.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/jwt-authentication/main.go&#34;&gt;
&lt;/pre&gt;


&lt;p&gt;Run &lt;code&gt;main.go&lt;/code&gt; and making a request to the root path &lt;code&gt;/&lt;/code&gt; returns a 200 OK response,
as this route does not use our JWT authentication middleware. Sending requests to
&lt;code&gt;/restricted&lt;/code&gt; (our authenticated route) with either no Authorization header or invalid
Authorization headers / tokens will return 401 Unauthorized.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Unauthenticated route
$ curl localhost:1323/  =&amp;gt; No auth required for this route.

# No Authentication header
$ curl localhost:1323/restricted  =&amp;gt; Unauthorized

# Invalid Authentication method
$  curl localhost:1323/restricted -H &amp;quot;Authorization: Invalid &amp;quot; =&amp;gt; Unauthorized

# Invalid token
$  curl localhost:1323/restricted -H &amp;quot;Authorization: Bearer InvalidToken&amp;quot; =&amp;gt; Unauthorized
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;token.go&lt;/code&gt; (source) will print JWT that is valid against this middleware
to stdout. You can use this token to test succesful authentication on the &lt;code&gt;/restricted&lt;/code&gt; path.&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/jwt-authentication/token/token.go&#34;&gt;
&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Valid token
$  curl localhost:1323/restricted -H &amp;quot;Authorization: Bearer &amp;lt;token&amp;gt;&amp;quot; =&amp;gt; Access granted with JWT.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maintainers:8b1052a6b68673242c4620ca13418908&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/axdg&#34;&gt;axdg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-3:8b1052a6b68673242c4620ca13418908&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/jwt-authentication
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>https://labstack.com/echo/guide/middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/guide/middleware/</guid>
      <description>

&lt;p&gt;Middleware is a function which is chained in the HTTP request-response cycle. Middleware
has access to the request and response objects which it utilizes to perform a specific
action, for example, logging every request.&lt;/p&gt;

&lt;h3 id=&#34;logger:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Logger&lt;/h3&gt;

&lt;p&gt;Logs each HTTP request with method, path, status, response time and bytes served.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(Logger())

// Output: `2015/06/07 18:16:16 GET / 200 13.238µs 14`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;basicauth:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;BasicAuth&lt;/h3&gt;

&lt;p&gt;BasicAuth middleware provides an HTTP basic authentication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For valid credentials it calls the next handler in the chain.&lt;/li&gt;
&lt;li&gt;For invalid Authorization header it sends &amp;ldquo;404 - Bad Request&amp;rdquo; response.&lt;/li&gt;
&lt;li&gt;For invalid credentials, it sends &amp;ldquo;401 - Unauthorized&amp;rdquo; response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := e.Group(&amp;quot;/admin&amp;quot;)
e.Use(middleware.BasicAuth(func(username, password string) bool {
	if username == &amp;quot;joe&amp;quot; &amp;amp;&amp;amp; password == &amp;quot;secret&amp;quot; {
		return true
	}
	return false
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gzip:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Gzip&lt;/h3&gt;

&lt;p&gt;Gzip middleware compresses HTTP response using gzip compression scheme.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(mw.Gzip())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;recover:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Recover&lt;/h3&gt;

&lt;p&gt;Recover middleware recovers from panics anywhere in the chain and handles the
control to the centralized
&lt;a href=&#34;https://labstack.com/echo/guide/customization/#http-error-handler:edb487b8a9d5904cd965671b5eb1b438&#34;&gt;HTTPErrorHandler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e.Use(middleware.Recover())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;recipes-https-github-com-labstack-echox-tree-master-recipe-middleware:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/middleware&#34;&gt;Recipes&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>https://labstack.com/echo/recipes/middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://labstack.com/echo/recipes/middleware/</guid>
      <description>

&lt;h3 id=&#34;server:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre data-src=&#34;https://raw.githubusercontent.com/labstack/echox/master/recipe/middleware/main.go&#34;&gt;
&lt;/pre&gt;


&lt;h3 id=&#34;maintainers:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Maintainers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vishr&#34;&gt;vishr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-code-hugoshortcode-2:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echox/tree/master/recipe/middleware
&#34;&gt;Source Code&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>